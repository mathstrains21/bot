import unittest
from unittest.mock import AsyncMock, Mock

from discord import NotFound

from bot.constants import Channels, STAFF_ROLES
from bot.exts.filters import antimalware
from tests.helpers import MockAttachment, MockBot, MockMessage, MockRole


class AntiMalwareCogTests(unittest.IsolatedAsyncioTestCase):
    """Test the AntiMalware cog."""

    def setUp(self):
        """Sets up fresh objects for each test."""
        self.bot = MockBot()
        self.bot.filter_list_cache = {
            "FILE_FORMAT.True": {
                ".first": {},
                ".second": {},
                ".third": {},
            }
        }
        self.cog = antimalware.AntiMalware(self.bot)
        self.message = MockMessage()
        self.message.webhook_id = None
        self.message.author.bot = None
        self.whitelist = [".first", ".second", ".third"]

    async def test_message_with_allowed_attachment(self):
        """Messages with allowed extensions should not be deleted"""
        attachment = MockAttachment(filename="python.first")
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)
        self.message.delete.assert_not_called()

    async def test_message_without_attachment(self):
        """Messages without attachments should result in no action."""
        await self.cog.on_message(self.message)
        self.message.delete.assert_not_called()

    async def test_direct_message_with_attachment(self):
        """Direct messages should have no action taken."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]
        self.message.guild = None

        await self.cog.on_message(self.message)

        self.message.delete.assert_not_called()

    async def test_webhook_message_with_illegal_extension(self):
        """A webhook message containing an illegal extension should be ignored."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.webhook_id = 697140105563078727
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)

        self.message.delete.assert_not_called()

    async def test_bot_message_with_illegal_extension(self):
        """A bot message containing an illegal extension should be ignored."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.author.bot = 409107086526644234
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)

        self.message.delete.assert_not_called()

    async def test_message_with_illegal_extension_gets_deleted(self):
        """A message containing an illegal extension should send an embed."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)

        self.message.delete.assert_called_once()

    async def test_message_send_by_staff(self):
        """A message send by a member of staff should be ignored."""
        staff_role = MockRole(id=STAFF_ROLES[0])
        self.message.author.roles.append(staff_role)
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)

        self.message.delete.assert_not_called()

    async def test_python_file_redirect_embed_description(self):
        """A message containing a .py file should result in an embed redirecting the user to our paste site"""
        attachment = MockAttachment(filename="python.py")
        self.message.attachments = [attachment]
        self.message.channel.send = AsyncMock()

        await self.cog.on_message(self.message)
        self.message.channel.send.assert_called_once()
        args, kwargs = self.message.channel.send.call_args
        embed = kwargs.pop("embed")

        self.assertEqual(embed.description, antimalware.PY_EMBED_DESCRIPTION)

    async def test_txt_file_redirect_embed_description(self):
        """A message containing a .txt/.json/.csv file should result in the correct embed."""
        test_values = (
            ("text", ".txt"),
            ("json", ".json"),
            ("csv", ".csv"),
        )

        for file_name, disallowed_extension in test_values:
            with self.subTest(
                file_name=file_name, disallowed_extension=disallowed_extension
            ):

                attachment = MockAttachment(
                    filename=f"{file_name}{disallowed_extension}"
                )
                self.message.attachments = [attachment]
                self.message.channel.send = AsyncMock()
                antimalware.TXT_EMBED_DESCRIPTION = Mock()
                antimalware.TXT_EMBED_DESCRIPTION.format.return_value = "test"

                await self.cog.on_message(self.message)
                self.message.channel.send.assert_called_once()
                args, kwargs = self.message.channel.send.call_args
                embed = kwargs.pop("embed")
                cmd_channel = self.bot.get_channel(Channels.bot_commands)

                self.assertEqual(
                    embed.description,
                    antimalware.TXT_EMBED_DESCRIPTION.format.return_value,
                )
                antimalware.TXT_EMBED_DESCRIPTION.format.assert_called_with(
                    blocked_extension=disallowed_extension,
                    cmd_channel_mention=cmd_channel.mention,
                )

    async def test_other_disallowed_extension_embed_description(self):
        """Test the description for a non .py/.txt/.json/.csv disallowed extension."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]
        self.message.channel.send = AsyncMock()
        antimalware.DISALLOWED_EMBED_DESCRIPTION = Mock()
        antimalware.DISALLOWED_EMBED_DESCRIPTION.format.return_value = "test"

        await self.cog.on_message(self.message)
        self.message.channel.send.assert_called_once()
        args, kwargs = self.message.channel.send.call_args
        embed = kwargs.pop("embed")
        meta_channel = self.bot.get_channel(Channels.meta)

        self.assertEqual(
            embed.description,
            antimalware.DISALLOWED_EMBED_DESCRIPTION.format.return_value,
        )
        antimalware.DISALLOWED_EMBED_DESCRIPTION.format.assert_called_with(
            joined_whitelist=", ".join(self.whitelist),
            blocked_extensions_str=".disallowed",
            meta_channel_mention=meta_channel.mention,
        )

    async def test_removing_deleted_message_logs(self):
        """Removing an already deleted message logs the correct message"""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]
        self.message.delete = AsyncMock(
            side_effect=NotFound(response=Mock(status=""), message="")
        )

        with self.assertLogs(logger=antimalware.log, level="INFO"):
            await self.cog.on_message(self.message)
        self.message.delete.assert_called_once()

    async def test_message_with_illegal_attachment_logs(self):
        """Deleting a message with an illegal attachment should result in a log."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]

        with self.assertLogs(logger=antimalware.log, level="INFO"):
            await self.cog.on_message(self.message)

    async def test_get_disallowed_extensions(self):
        """The return value should include all non-whitelisted extensions."""
        test_values = (
            ([], []),
            (self.whitelist, []),
            ([".first"], []),
            ([".first", ".disallowed"], [".disallowed"]),
            ([".disallowed"], [".disallowed"]),
            ([".disallowed", ".illegal"], [".disallowed", ".illegal"]),
        )

        for extensions, expected_disallowed_extensions in test_values:
            with self.subTest(
                extensions=extensions,
                expected_disallowed_extensions=expected_disallowed_extensions,
            ):
                self.message.attachments = [
                    MockAttachment(filename=f"filename{extension}")
                    for extension in extensions
                ]
                disallowed_extensions = self.cog._get_disallowed_extensions(
                    self.message
                )
                self.assertCountEqual(
                    disallowed_extensions, expected_disallowed_extensions
                )


class AntiMalwareSetupTests(unittest.TestCase):
    """Tests setup of the `AntiMalware` cog."""

    def test_setup(self):
        """Setup of the extension should call add_cog."""
        bot = MockBot()
        antimalware.setup(bot)
        bot.add_cog.assert_called_once()
